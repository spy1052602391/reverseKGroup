class ListNode {
    int val;
    ListNode next;
    ListNode(int x) { val = x; }
}

class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if(head == null){
            return null;
        }
        ListNode cur = head;
        ListNode pre = null;
        ListNode pre2 = null;
        ListNode first = null;
        ListNode tmp = cur;
        int count = 0;
        while(count++ < (k-1) && tmp!=null){
            tmp = tmp.next;
        }
        if(tmp == null){
            return head;
        }else{
            head = tmp;
        }
        int num = 0;
        count = 0;

        while(cur != null){
            if(count%k == 0){
                tmp = cur;
                while(num++<(k-1) && tmp!=null){
                    tmp = tmp.next;
                }
                num = 0;
                if(tmp == null){
                    break;
                }
                if(count != 0){
                    first.next = tmp;
                }
                first = cur;
            }
            count++;
            pre2 = pre;
            pre = cur;
            cur = cur.next;
            pre.next = pre2;
        }
        if(count == 0){
            head = cur;
        }
        first.next = cur;
        return head;
    }
}

public class Test {
    public static void main(String[] args) {
        ListNode l1 = new ListNode(2);
        ListNode l2 = new ListNode(1);
        ListNode l3 = new ListNode(4);
        ListNode l4 = new ListNode(3);
        ListNode l5 = new ListNode(5);
        l1.next = l2;
        l2.next = l3;
        l3.next = l4;
        l4.next = l5;
        Solution sol = new Solution();
        ListNode lis = sol.reverseKGroup(l1,2);
        System.out.println(lis.val);
        System.out.println(lis.next.val);
        System.out.println(lis.next.next.val);
        System.out.println(lis.next.next.next.val);
        System.out.println(lis.next.next.next.next.val);
    }
}
